import os
import mysql.connector
from mysql.connector import Error

# L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
AIVEN_CONFIG = {
    "host": os.environ.get("AIVEN_DB_HOST"),
    "user": os.environ.get("AIVEN_DB_USER"),
    "password": os.environ.get("AIVEN_DB_PASSWORD"),
    "database": os.environ.get("AIVEN_DB_NAME"),
    "port": int(os.environ.get("AIVEN_DB_PORT", 3306)),
}

CPANEL_CONFIG = {
    "host": os.environ.get("CPANEL_DB_HOST"),
    "user": os.environ.get("CPANEL_DB_USER"),
    "password": os.environ.get("CPANEL_DB_PASSWORD"),
    "database": os.environ.get("CPANEL_DB_NAME"),
    "port": 3306,
}

def connect_db(config):
    """T·∫°o k·∫øt n·ªëi CSDL duy nh·∫•t"""
    try:
        conn = mysql.connector.connect(**config)
        return conn
    except Error as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi CSDL: {e}")
        return None

def get_all_tables(cursor):
    """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b·∫£ng (v·ªõi dictionary=True)"""
    cursor.execute("SHOW TABLES")
    return [list(table.values())[0] for table in cursor.fetchall()]


def get_all_data(cursor, tables):
    """L·∫•y d·ªØ li·ªáu c·ªßa t·∫•t c·∫£ c√°c b·∫£ng m·ªôt l·∫ßn"""
    all_data = {}
    for table in tables:
        cursor.execute(f"SELECT * FROM {table}")
        all_data[table] = cursor.fetchall()
    return all_data

def get_table_columns(cursor, table_name):
    """L·∫•y danh s√°ch c·ªôt c·ªßa b·∫£ng (cursor c√≥ dictionary=True)"""
    cursor.execute(f"SHOW COLUMNS FROM {table_name}")
    return [col["Field"] for col in cursor.fetchall()]

def batch_insert(cursor, table_name, columns, data, batch_size=500):
    """X√≥a d·ªØ li·ªáu c≈© c·ªßa b·∫£ng ƒë√≠ch v√† ch√®n d·ªØ li·ªáu m·ªõi theo batch."""
    if not data:
        return

    # 1Ô∏è‚É£ T·∫Øt kh√≥a ngo·∫°i n·∫øu c·∫ßn
    cursor.execute("SET FOREIGN_KEY_CHECKS=0")

    # 2Ô∏è‚É£ X√≥a to√†n b·ªô d·ªØ li·ªáu c≈© (d√πng TRUNCATE n·∫øu kh√¥ng c√≥ kh√≥a ngo·∫°i)
    cursor.execute(f"DELETE FROM {table_name}")

    # 3Ô∏è‚É£ T·∫°o truy v·∫•n INSERT
    placeholders = ", ".join(["%s"] * len(columns))
    query = f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({placeholders})"

    # 4Ô∏è‚É£ N·∫øu l√† b·∫£ng `users`, t·∫Øt trigger tr∆∞·ªõc khi ch√®n
    if table_name == 'users':
        cursor.execute("SET SESSION sql_mode='NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER'")

    # 5Ô∏è‚É£ Ch√®n d·ªØ li·ªáu theo batch
    for i in range(0, len(data), batch_size):
        cursor.executemany(query, data[i:i + batch_size])

    # 6Ô∏è‚É£ B·∫≠t l·∫°i trigger n·∫øu c·∫ßn
    if table_name == 'users':
        cursor.execute("SET SESSION sql_mode=DEFAULT")

    # 7Ô∏è‚É£ B·∫≠t l·∫°i kh√≥a ngo·∫°i
    cursor.execute("SET FOREIGN_KEY_CHECKS=1")


def sync_data():
    """H√†m ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu"""
    aiven_conn = connect_db(AIVEN_CONFIG)
    cpanel_conn = connect_db(CPANEL_CONFIG)

    if not aiven_conn or not cpanel_conn:
        return

    aiven_cursor = aiven_conn.cursor(dictionary=True)
    cpanel_cursor = cpanel_conn.cursor()

    tables = get_all_tables(aiven_cursor)
    if not tables:
        print("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o!")
        return

    # L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ Aiven trong m·ªôt l∆∞·ª£t
    all_data = get_all_data(aiven_cursor, tables)

    for table in tables:
        print(f"üöÄ ƒêang ƒë·ªìng b·ªô b·∫£ng: {table}")

        columns = get_table_columns(aiven_cursor, table)
        if not columns:
            print(f"‚ö†Ô∏è B·ªè qua b·∫£ng {table} v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c c·ªôt.")
            continue

        data = [tuple(row[col] for col in columns) for row in all_data[table]]
        batch_insert(cpanel_cursor, table, columns, data)

        print(f"‚úÖ ƒê√£ ƒë·ªìng b·ªô {len(data)} b·∫£n ghi v√†o b·∫£ng {table}.")

    cpanel_conn.commit()  # Ch·ªâ commit m·ªôt l·∫ßn sau khi ho√†n t·∫•t

    # ƒê√≥ng k·∫øt n·ªëi
    aiven_cursor.close()
    cpanel_cursor.close()
    aiven_conn.close()
    cpanel_conn.close()
    print("üéâ ƒê·ªìng b·ªô ho√†n t·∫•t!")

if __name__ == "__main__":
    sync_data()
