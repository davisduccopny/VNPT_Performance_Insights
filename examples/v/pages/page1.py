import streamlit as st
import pandas as pd
st.set_page_config(page_title="Page 1", page_icon="üìÑ",layout="wide")
import seaborn as sns
import matplotlib.pyplot as plt
tab1, tab2, tab3 = st.tabs(["Cat", "Dog", "Owl"])
with tab1:

    st.title("Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi t√πy ch·ªânh bi·ªÉu ƒë·ªì v√† b·∫£ng")

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel ƒë√£ t·∫£i l√™n
    file_path = "data/input_kehoach.xlsx"

    try:
        # ƒê·ªçc d·ªØ li·ªáu
        df = pd.read_excel(file_path)

        # L·ªçc ra gi√° tr·ªã duy nh·∫•t cho selectbox
        unique_ma_nv = df['ma_nv'].dropna().unique()
        unique_id_dv_606 = df['id_dv_606'].dropna().unique()

        # X·ª≠ l√Ω c·ªôt th√°ng
        month_columns = [col for col in df.columns if col.lower().startswith('t')]

        if not month_columns:
            st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt th√°ng (b·∫Øt ƒë·∫ßu b·∫±ng 't').")
        else:
            # T·∫°o c·ªôt v·ªõi t·ª∑ l·ªá 1:5 cho c√°c selectbox v√† n·ªôi dung
            col1, col2 = st.columns([2,4], gap = "medium")

            # Ph·∫ßn t√πy ch·ªçn l·ªçc d·ªØ li·ªáu (selectbox)
            with col1:
                st.subheader("T√πy ch·ªçn l·ªçc d·ªØ li·ªáu")
                selected_ma_nv = st.selectbox("Ch·ªçn gi√° tr·ªã ma_nv:", unique_ma_nv)
                selected_id_dv_606 = st.selectbox("Ch·ªçn gi√° tr·ªã id_dv_606:", unique_id_dv_606)

            # L·ªçc d·ªØ li·ªáu theo l·ª±a ch·ªçn
            filtered_data = df[(df['ma_nv'] == selected_ma_nv) & (df['id_dv_606'] == selected_id_dv_606)]

            # N·∫øu d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i
            if filtered_data.empty:
                col2.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ª±a ch·ªçn n√†y.")
            else:
                # Chuy·ªÉn d·ªØ li·ªáu t·ª´ d·∫°ng r·ªông sang d·∫°ng d√†i
                monthly_data = filtered_data[month_columns].T
                monthly_data.columns = [f"{selected_ma_nv} - {selected_id_dv_606}"]
                monthly_data.index = range(1, len(monthly_data) + 1)  # ƒê·ªïi t√™n index th√†nh s·ªë th√°ng

                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu v√† bi·ªÉu ƒë·ªì trong c·ªôt b√™n ph·∫£i
                with col2:
                    st.subheader(f"K·∫øt qu·∫£ ph√¢n t√≠ch cho '{selected_ma_nv}' v√† '{selected_id_dv_606}'")

                    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
                    st.write("### D·ªØ li·ªáu theo th√°ng")
                    st.dataframe(filtered_data)

                    # V·∫Ω bi·ªÉu ƒë·ªì
                    st.write("### Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng theo th√°ng")
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.plot(
                        monthly_data.index,
                        monthly_data.iloc[:, 0],
                        marker='o',
                        label=f"{selected_ma_nv} - {selected_id_dv_606}"
                    )
                    ax.set_title(f"TƒÉng tr∆∞·ªüng '{selected_ma_nv}' v√† '{selected_id_dv_606}' theo th√°ng", fontsize=16)
                    ax.set_xlabel("Th√°ng", fontsize=12)
                    ax.set_ylabel("Gi√° tr·ªã", fontsize=12)
                    ax.legend()
                    ax.grid(True)

                    st.pyplot(fig)

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

with tab2:
    st.title("Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi t√πy ch·ªânh bi·ªÉu ƒë·ªì v√† b·∫£ng")

    # ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel ƒë√£ t·∫£i l√™n
    file_path = "data/input_kehoach.xlsx"

    try:
        # ƒê·ªçc d·ªØ li·ªáu
        df = pd.read_excel(file_path)

        # L·ªçc ra gi√° tr·ªã duy nh·∫•t cho checkbox
        unique_ma_nv = df['ma_nv'].dropna().unique()
        unique_id_dv_606 = df['id_dv_606'].dropna().unique()

        # X·ª≠ l√Ω c·ªôt th√°ng
        month_columns = [col for col in df.columns if col.lower().startswith('t')]

        if not month_columns:
            st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt th√°ng (b·∫Øt ƒë·∫ßu b·∫±ng 't').")
        else:
            # T·∫°o layout v·ªõi t·ª∑ l·ªá 1:5
            col1, col2 = st.columns([2, 5], gap="medium")

            # Ph·∫ßn t√πy ch·ªçn l·ªçc d·ªØ li·ªáu (checkbox trong expander)
            with col1:
                st.subheader("T√πy ch·ªçn l·ªçc d·ªØ li·ªáu")

                # Expander cho ma_nv (ƒê∆∞a l√™n tr√™n, lu√¥n check t·∫•t c·∫£ gi√° tr·ªã)
                with st.expander("Ch·ªçn `ma_nv`", expanded=True):
                    selected_ma_nv = [
                        ma_nv for ma_nv in unique_ma_nv if st.checkbox(f"ma_nv: {ma_nv}", value=True)
                    ]
                    if not selected_ma_nv:  # N·∫øu kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c ch·ªçn, ch·ªçn t·∫•t c·∫£
                        selected_ma_nv = list(unique_ma_nv)

                # Expander cho id_dv_606 (expanded=False, ch·ªçn m·∫∑c ƒë·ªãnh gi√° tr·ªã ƒë·∫ßu ti√™n)
                with st.expander("Ch·ªçn `id_dv_606`", expanded=False):
                    selected_id_dv_606 = []
                    for id_dv in unique_id_dv_606:
                        is_checked = st.checkbox(f"id_dv_606: {id_dv}", value=(id_dv == unique_id_dv_606[0]))
                        if is_checked:
                            selected_id_dv_606.append(id_dv)
                    if not selected_id_dv_606:  # N·∫øu kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c ch·ªçn, ch·ªçn gi√° tr·ªã ƒë·∫ßu ti√™n
                        selected_id_dv_606 = [unique_id_dv_606[0]]

            # L·ªçc d·ªØ li·ªáu theo l·ª±a ch·ªçn checkbox
            filtered_data = df[
                (df['ma_nv'].isin(selected_ma_nv)) & (df['id_dv_606'].isin(selected_id_dv_606))
            ]

            # T√≠nh t·ªïng gi√° tr·ªã cho t·ª´ng nh√¢n vi√™n (ma_nv) qua c√°c th√°ng
            if selected_ma_nv:  # Ki·ªÉm tra n·∫øu c√≥ `ma_nv` ƒë∆∞·ª£c ch·ªçn
                monthly_totals_by_ma_nv = df[df['ma_nv'].isin(selected_ma_nv)].groupby('ma_nv')[month_columns].sum()
                monthly_totals_by_ma_nv['T·ªïng 12 th√°ng'] = monthly_totals_by_ma_nv.sum(axis=1)
            else:
                monthly_totals_by_ma_nv = pd.DataFrame()  # N·∫øu kh√¥ng c√≥ `ma_nv` ƒë∆∞·ª£c ch·ªçn, kh√¥ng hi·ªÉn th·ªã b·∫£ng

            # T√≠nh t·ªïng gi√° tr·ªã cho t·ª´ng d·ªãch v·ª• (id_dv_606) qua c√°c th√°ng
            if selected_id_dv_606:  # Ki·ªÉm tra n·∫øu c√≥ `id_dv_606` ƒë∆∞·ª£c ch·ªçn
                monthly_totals_by_id_dv_606 = df[df['id_dv_606'].isin(selected_id_dv_606)].groupby('id_dv_606')[month_columns].sum()
                monthly_totals_by_id_dv_606['T·ªïng 12 th√°ng'] = monthly_totals_by_id_dv_606.sum(axis=1)
            else:
                monthly_totals_by_id_dv_606 = pd.DataFrame()  # N·∫øu kh√¥ng c√≥ `id_dv_606` ƒë∆∞·ª£c ch·ªçn, kh√¥ng hi·ªÉn th·ªã b·∫£ng

            # T·ªïng gi√° tr·ªã 12 th√°ng to√†n b·ªô nh√¢n vi√™n
            total_value_12_months_ma_nv = monthly_totals_by_ma_nv['T·ªïng 12 th√°ng'].sum()

            # T·ªïng gi√° tr·ªã 12 th√°ng to√†n b·ªô d·ªãch v·ª•
            total_value_12_months_id_dv_606 = monthly_totals_by_id_dv_606['T·ªïng 12 th√°ng'].sum()

            # T√≠nh t·ª∑ l·ªá c·ªßa t·ª´ng nh√¢n vi√™n
            monthly_totals_by_ma_nv['T·ª∑ l·ªá (%)'] = (monthly_totals_by_ma_nv['T·ªïng 12 th√°ng'] / total_value_12_months_ma_nv) * 100

            # T√≠nh t·ª∑ l·ªá c·ªßa t·ª´ng d·ªãch v·ª•
            monthly_totals_by_id_dv_606['T·ª∑ l·ªá (%)'] = (monthly_totals_by_id_dv_606['T·ªïng 12 th√°ng'] / total_value_12_months_id_dv_606) * 100

            # Hi·ªÉn th·ªã b·∫£ng t·ªïng s·ªë gi√° tr·ªã theo th√°ng cho `ma_nv` trong container thu·ªôc col2
            with col2:
                st.subheader("T·ªïng s·ªë gi√° tr·ªã theo th√°ng c·ªßa c√°c `ma_nv`")
                col2_1, col2_2 = st.columns([1,1])
                with col2_1:

                    # Hi·ªÉn th·ªã b·∫£ng t·ªïng s·ªë gi√° tr·ªã theo t·ª´ng th√°ng c·ªßa c√°c `ma_nv`
                    if not monthly_totals_by_ma_nv.empty:
                        st.write("### B·∫£ng t·ªïng s·ªë gi√° tr·ªã theo t·ª´ng th√°ng c·ªßa c√°c `ma_nv` ƒë√£ ch·ªçn")
                        st.dataframe(
                            monthly_totals_by_ma_nv.style.set_properties(**{
                                'font-size': '12px',  # Thu nh·ªè font-size trong b·∫£ng
                            })
                        )
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªïng s·ªë gi√° tr·ªã cho c√°c `ma_nv` ƒë√£ ch·ªçn.")

                    
                with col2_2:
                    # Bi·ªÉu ƒë·ªì donut t·ª∑ l·ªá c√°c nh√¢n vi√™n trong t·ªïng gi√° tr·ªã 12 th√°ng
                    if not monthly_totals_by_ma_nv.empty:
                        st.write("### Bi·ªÉu ƒë·ªì Donut t·ª∑ l·ªá c√°c nh√¢n vi√™n trong t·ªïng gi√° tr·ªã 12 th√°ng")
                        fig, ax = plt.subplots(figsize=(10, 10))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ·ªü ƒë√¢y
                        ax.pie(
                            monthly_totals_by_ma_nv['T·ª∑ l·ªá (%)'],
                            labels=monthly_totals_by_ma_nv.index,
                            autopct='%1.1f%%',
                            startangle=90,
                            colors=plt.cm.Paired.colors,
                            wedgeprops={'width': 0.3}  # T·∫°o kho·∫£ng tr·ªëng ·ªü gi·ªØa
                        )
                        ax.set_title("T·ª∑ l·ªá c√°c nh√¢n vi√™n trong t·ªïng gi√° tr·ªã 12 th√°ng", fontsize=16)
                        ax.axis('equal')  # ƒê·∫£m b·∫£o h√¨nh tr√≤n

                        st.pyplot(fig)

            with col2:
                # Hi·ªÉn th·ªã b·∫£ng t·ªïng s·ªë gi√° tr·ªã theo th√°ng cho `id_dv_606` trong container thu·ªôc col2
                st.subheader("T·ªïng s·ªë gi√° tr·ªã theo th√°ng c·ªßa c√°c `id_dv_606`")
                col2_3, col2_4 = st.columns([1,1])
                with col2_3:
                    # Hi·ªÉn th·ªã b·∫£ng t·ªïng s·ªë gi√° tr·ªã theo t·ª´ng th√°ng c·ªßa c√°c `id_dv_606`
                    if not monthly_totals_by_id_dv_606.empty:
                        st.write("### B·∫£ng t·ªïng s·ªë gi√° tr·ªã theo t·ª´ng th√°ng c·ªßa c√°c `id_dv_606` ƒë√£ ch·ªçn")
                        st.dataframe(
                            monthly_totals_by_id_dv_606.style.set_properties(**{
                                'font-size': '12px',  # Thu nh·ªè font-size trong b·∫£ng
                            })
                        )
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t·ªïng s·ªë gi√° tr·ªã cho c√°c `id_dv_606` ƒë√£ ch·ªçn.")
                    
                with col2_4:
                    # Bi·ªÉu ƒë·ªì donut t·ª∑ l·ªá c√°c d·ªãch v·ª• trong t·ªïng gi√° tr·ªã 12 th√°ng
                    if not monthly_totals_by_id_dv_606.empty:
                        st.write("### Bi·ªÉu ƒë·ªì Donut t·ª∑ l·ªá c√°c d·ªãch v·ª• trong t·ªïng gi√° tr·ªã 12 th√°ng")
                        fig, ax = plt.subplots(figsize=(10, 10))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ·ªü ƒë√¢y
                        ax.pie(
                            monthly_totals_by_id_dv_606['T·ª∑ l·ªá (%)'],
                            labels=monthly_totals_by_id_dv_606.index,
                            autopct='%1.1f%%',
                            startangle=90,
                            colors=plt.cm.Paired.colors,
                            wedgeprops={'width': 0.3}  # T·∫°o kho·∫£ng tr·ªëng ·ªü gi·ªØa
                        )
                        ax.set_title("T·ª∑ l·ªá c√°c d·ªãch v·ª• trong t·ªïng gi√° tr·ªã 12 th√°ng", fontsize=16)
                        ax.axis('equal')  # ƒê·∫£m b·∫£o h√¨nh tr√≤n

                        st.pyplot(fig)


            # N·∫øu d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i
            if filtered_data.empty:
                col2.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho l·ª±a ch·ªçn n√†y.")
            else:
                # Chuy·ªÉn d·ªØ li·ªáu t·ª´ d·∫°ng r·ªông sang d·∫°ng d√†i
                monthly_data = filtered_data[month_columns].T
                monthly_data.columns = [
                    f"{ma_nv} - {id_dv}" for ma_nv, id_dv in zip(
                        filtered_data['ma_nv'], filtered_data['id_dv_606']
                    )
                ]
                monthly_data.index = range(1, len(monthly_data) + 1)  # ƒê·ªïi t√™n index th√†nh s·ªë th√°ng

                # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu v√† bi·ªÉu ƒë·ªì trong c·ªôt b√™n ph·∫£i
                with col2:
                    st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch")

                    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
                    st.write("### D·ªØ li·ªáu theo th√°ng")
                    st.dataframe(
                        filtered_data.style.set_properties(**{
                            'font-size': '12px',  # Thu nh·ªè font-size trong b·∫£ng
                        })
                    )
    
                    # V·∫Ω bi·ªÉu ƒë·ªì
                    st.write("### Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng theo th√°ng")
                    fig, ax = plt.subplots(figsize=(12, 6))
                    for column in monthly_data.columns:
                        ax.plot(
                            monthly_data.index,
                            monthly_data[column],
                            marker='o',
                            label=column
                        )
                    ax.set_title("TƒÉng tr∆∞·ªüng theo th√°ng", fontsize=16)
                    ax.set_xlabel("Th√°ng", fontsize=12)
                    ax.set_ylabel("Gi√° tr·ªã", fontsize=12)
                    ax.legend(fontsize=10, loc='upper left')  # Gi·∫£m k√≠ch th∆∞·ªõc font c·ªßa legend
                    ax.grid(True)

                    st.pyplot(fig)
                    

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")


import base64

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn t·ªáp h√¨nh ·∫£nh c·ª•c b·ªô
image_path = "examples/background_2211.jpg"

# Chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh th√†nh base64 ƒë·ªÉ Streamlit s·ª≠ d·ª•ng
def get_base64_from_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    return encoded_string

# L·∫•y base64 t·ª´ ·∫£nh
image_base64 = get_base64_from_image(image_path)

# CSS ƒë·ªÉ th√™m h√¨nh n·ªÅn t·ª´ ·∫£nh c·ª•c b·ªô
page_bg_css = f"""
<style>
body {{
    background-image: url("data:image/jpeg;base64,{image_base64}");
    background-size: cover;
    background-attachment: fixed;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0.85; /* ƒê·ªô m·ªù */
}}

main {{
    background-color: rgba(255, 255, 255, 0.8); /* L√†m m·ªù n·ªôi dung ch√≠nh */
    border-radius: 10px; /* Bo g√≥c */
    padding: 20px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Hi·ªáu ·ª©ng ƒë·ªï b√≥ng */
}}
col2_1 {{
    border: 20px solid white;
    border-radius: 10px;
    background-color: #f0f0f0;
}}
</style>
"""
# Tab 3: Owl - Nhi·ªÅu m√†u s·∫Øc h∆°n
with tab3:
    st.title("Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi phong c√°ch nhi·ªÅu m√†u s·∫Øc")

    # ƒê∆∞·ªùng d·∫´n file
    file_path = "data/input_kehoach.xlsx"

    try:
        # ƒê·ªçc d·ªØ li·ªáu
        df = pd.read_excel(file_path)

        # X·ª≠ l√Ω d·ªØ li·ªáu
        unique_ma_nv = df['ma_nv'].dropna().unique()
        unique_id_dv_606 = df['id_dv_606'].dropna().unique()
        month_columns = [col for col in df.columns if col.lower().startswith('t')]

        if not month_columns:
            st.error("Kh√¥ng t√¨m th·∫•y c√°c c·ªôt th√°ng (b·∫Øt ƒë·∫ßu b·∫±ng 't').")
        else:
            col1, col2 = st.columns([2, 5], gap="medium")

            # L·ª±a ch·ªçn l·ªçc d·ªØ li·ªáu
            with col1:
                st.subheader("T√πy ch·ªçn l·ªçc d·ªØ li·ªáu")
                selected_ma_nv = st.multiselect("Ch·ªçn ma_nv:", unique_ma_nv, default=unique_ma_nv[:2])
                selected_id_dv_606 = st.multiselect("Ch·ªçn id_dv_606:", unique_id_dv_606, default=unique_id_dv_606[:2])

            filtered_data = df[
                (df['ma_nv'].isin(selected_ma_nv)) & (df['id_dv_606'].isin(selected_id_dv_606))
            ]

            if filtered_data.empty:
                col2.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi l·ª±a ch·ªçn.")
            else:
                # T·ªïng h·ª£p d·ªØ li·ªáu theo th√°ng
                grouped_data = filtered_data.groupby(['ma_nv'])[month_columns].sum()
                grouped_data['T·ªïng 12 th√°ng'] = grouped_data.sum(axis=1)

                with col2:
                    st.subheader("Ph√¢n t√≠ch d·ªØ li·ªáu v√† bi·ªÉu ƒë·ªì")

                    # Hi·ªÉn th·ªã b·∫£ng v·ªõi m√†u s·∫Øc
                    st.write("### B·∫£ng t·ªïng h·ª£p d·ªØ li·ªáu")
                    styled_table = grouped_data.style.background_gradient(
                        cmap="coolwarm", axis=0
                    ).set_properties(**{"font-size": "12px"})
                    st.dataframe(styled_table)

                    # Bi·ªÉu ƒë·ªì c·ªôt (Bar chart)
                    st.write("### Bi·ªÉu ƒë·ªì c·ªôt")
                    fig, ax = plt.subplots(figsize=(10, 6))
                    grouped_data[month_columns].plot(kind='bar', ax=ax, color=sns.color_palette("husl", len(month_columns)))
                    ax.set_title("T·ªïng gi√° tr·ªã theo th√°ng", fontsize=16)
                    ax.set_xlabel("ma_nv", fontsize=12)
                    ax.set_ylabel("Gi√° tr·ªã", fontsize=12)
                    ax.legend(title="Th√°ng")
                    st.pyplot(fig)

                    # Bi·ªÉu ƒë·ªì heatmap
                    st.write("### Bi·ªÉu ƒë·ªì Heatmap")
                    fig, ax = plt.subplots(figsize=(12, 6))
                    sns.heatmap(
                        grouped_data[month_columns],
                        annot=True,
                        fmt=".0f",
                        cmap="coolwarm",
                        cbar=True,
                        ax=ax,
                    )
                    ax.set_title("T·ªïng gi√° tr·ªã theo t·ª´ng th√°ng", fontsize=16)
                    ax.set_xlabel("Th√°ng", fontsize=12)
                    ax.set_ylabel("ma_nv", fontsize=12)
                    st.pyplot(fig)

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

